# C# files
[*.cs]

#### Core EditorConfig Options ####

# Indentation and spacing
indent_style = tab
indent_size = 4
tab_width = 4

# Newline options
end_of_line = crlf
insert_final_newline = true

#### .NET Coding Conventions ####

# var preferences
csharp_style_var_for_built_in_types = true
csharp_style_var_when_type_is_apparent = true
csharp_style_var_elsewhere = true

# Expression-bodied members
csharp_style_expression_bodied_methods = false
csharp_style_expression_bodied_constructors = false
csharp_style_expression_bodied_operators = false
csharp_style_expression_bodied_properties = true
csharp_style_expression_bodied_indexers = true
csharp_style_expression_bodied_accessors = true
csharp_style_expression_bodied_lambdas = true
csharp_style_expression_bodied_local_functions = true

# Pattern matching
csharp_style_pattern_matching_over_as_with_null_check = true
csharp_style_pattern_matching_over_is_with_cast_check = true
csharp_style_inlined_variable_declaration = true

# Null-checking preferences
csharp_style_throw_expression = true
csharp_style_conditional_delegate_call = true

# Code block preferences
csharp_prefer_braces = true

# Modifier preferences
dotnet_style_readonly_field = true
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async

# Expression-level preferences
dotnet_style_object_initializer = true
dotnet_style_collection_initializer = true
dotnet_style_explicit_tuple_names = true
dotnet_style_prefer_inferred_tuple_names = true
dotnet_style_prefer_inferred_anonymous_type_member_names = true
dotnet_style_prefer_compound_assignment = true
csharp_prefer_simple_default_expression = true
csharp_prefer_local_over_anonymous_function = true

# Unused code preferences
dotnet_remove_unnecessary_suppression_exclusions = true

# `using` directive preferences
csharp_using_directive_placement = outside_namespace

# `using` statement preferences
csharp_prefer_simple_using_statement = true

#### Naming Conventions ####

# StyleCop naming rules: https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300-SA1316.md

# Interfaces should begin with 'I'
dotnet_naming_rule.interface_should_be_pascal_case_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_pascal_case_with_i.style = pascal_case_with_i
dotnet_naming_rule.interface_should_be_pascal_case_with_i.severity = suggestion

dotnet_naming_symbols.interface = { symbol_kind = interface }
dotnet_naming_style.pascal_case_with_i = { required_prefix = I, capitalization = pascal_case }

# Static fields should begin with 's_'
dotnet_naming_rule.static_fields_should_begin_with_s.symbols = static_fields
dotnet_naming_rule.static_fields_should_begin_with_s.style = static_fields_style
dotnet_naming_rule.static_fields_should_begin_with_s.severity = suggestion

dotnet_naming_symbols.static_fields = { symbol_kind = field, required_modifiers = static }
dotnet_naming_style.static_fields_style = { required_prefix = s_ }

# Non-static fields should begin with '_'
dotnet_naming_rule.non_static_fields_should_begin_with_underscore.symbols = non_static_fields
dotnet_naming_rule.non_static_fields_should_begin_with_underscore.style = non_static_fields_style
dotnet_naming_rule.non_static_fields_should_begin_with_underscore.severity = suggestion

dotnet_naming_symbols.non_static_fields = { symbol_kind = field }
dotnet_naming_style.non_static_fields_style = { required_prefix = _ }

# Static, non-const, non-private fields should be PascalCase
dotnet_naming_rule.public_static_fields_should_be_pascal_case.symbols = public_static_fields
dotnet_naming_rule.public_static_fields_should_be_pascal_case.style = pascal_case
dotnet_naming_rule.public_static_fields_should_be_pascal_case.severity = suggestion

dotnet_naming_symbols.public_static_fields = { symbol_kind = field, required_modifiers = static, required_accessibilities = public, required_accessibilities = protected, required_accessibilities = internal, required_accessibilities = protected_internal }
dotnet_naming_style.pascal_case = { capitalization = pascal_case }

# Type parameters should begin with 'T'
dotnet_naming_rule.type_parameters_should_begin_with_t.symbols = type_parameters
dotnet_naming_rule.type_parameters_should_begin_with_t.style = type_parameters_style
dotnet_naming_rule.type_parameters_should_begin_with_t.severity = suggestion

dotnet_naming_symbols.type_parameters = { symbol_kind = type_parameter }
dotnet_naming_style.type_parameters_style = { required_prefix = T }

#### C# Formatting Rules ####

# Newline options
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation options
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current

# Space options
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_parentheses_and_empty_parameter_list_in_method_declaration = false
csharp_space_between_parentheses_and_empty_parameter_list_in_method_call = false
csharp_space_between_parentheses_and_parameter_list_in_method_declaration = false
csharp_space_between_parentheses_and_parameter_list_in_method_call = false

# Wrapping options
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks = true

#### .NET Code Style ####

# this. and Me. preferences
dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_property = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_event = false

# Language keywords vs BCL types
dotnet_style_predefined_type_for_locals_parameters_members = true
dotnet_style_predefined_type_for_member_access = true

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_operators = never_if_unnecessary

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members

# Default 'switch' statement case
dotnet_style_prefer_switch_expression = true

# Code block preferences
csharp_prefer_braces = true:warning

# Unused code preferences
dotnet_code_quality_unused_parameters = all

# `using` directive preferences
dotnet_sort_system_directives_first = true
csharp_using_directive_placement = outside_namespace:suggestion

# `using` statement preferences
csharp_prefer_simple_using_statement = true:suggestion

# Parameter null-checking
dotnet_code_quality_check_for_null_values_in_public_api = true

# Other
csharp_prefer_static_local_function = true:suggestion
